<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">


    <!--对于注解的Handler可以单个配置，但是实际开发中是使用组件扫描的形式-->
    <!--可以扫描controller service、....，这里扫描controller，指定controller 的包-->
    <context:component-scan base-package="com.ssm.controller"/>

    <!--注解映射器和适配器的配置-->
    <!--使用mvc:annotation-driven配置，他会默认绑定很多参数和方法，比如json转换解析器就默认加载了-->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator"></mvc:annotation-driven>

    <!-- 对静态资源的访问解析:包括js、css、img等
     含义是url访问/js/下的文件，都去找路径/js/的资源
     -->
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/img/**" location="/img/"/>

    <!--视图解析器
    解析jsp，默认使用jstl标签，classpath下得有jstl的包
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


    <!--自定义参数绑定-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--转换器-->
        <property name="converters">
            <set>
                <!--日期类型转换-->
                <bean class="com.ssm.utils.CustomDateConverter"/>
            </set>
        </property>
    </bean>


    <!-- 校验器 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!-- Hibernate校验器 -->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定
        则默认使用classpath下的ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    <!--校验错误信息配置文件  -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!-- 资源文件名 -->
        <property name="basenames">
            <list>
                <value>CustomValidationMessages</value>
            </list>
        </property>
        <!-- 资源文件编码格式 -->
        <property name="fileEncodings" value="utf-8"/>
        <!-- 对资源文件内容缓存时间。单位：秒 -->
        <property name="cacheSeconds" value="120"/>
    </bean>


    <!--全局异常处理器
    只要实现HandlerExceptionResolver接口就是全局异常处理器
    -->
    <bean class="com.ssm.Exceptions.CustomExceptionResolver"/>


    <!--文件上传-->
    <!-- 定义文件解释器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置默认编码 -->
        <property name="defaultEncoding" value="utf-8"></property>
        <!-- 上传文件最大大小5M-->
        <property name="maxUploadSize" value="5242440"></property>
    </bean>

    <!--拦截器-->
    <mvc:interceptors>
        <!--多个拦截器，顺序执行-->

        <!--第一个拦截器是登录认证拦截器-->
        <mvc:interceptor>
            <!--/**  表示所有url包括子url  若是只是/*  则只表示根的url-->
            <mvc:mapping path="/**"/>
            <bean class="com.ssm.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <!--/**  表示所有url包括子url  若是只是/*  则只表示根的url-->
            <mvc:mapping path="/**"/>
            <bean class="com.ssm.interceptor.HandlerInterceptor1"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <!--/**  表示所有url包括子url  若是只是/*  则只表示根的url-->
            <mvc:mapping path="/**"/>
            <bean class="com.ssm.interceptor.HandlerInterceptor2"/>
        </mvc:interceptor>
    </mvc:interceptors>


</beans>

